{
  "Name": "pod_security_policy",
  "PodsDestroyed": 25,
  "ScenariosAttempted": 35,
  "ScenariosSucceeded": 33,
  "ScenariosFailed": 2,
  "Result": "Failed",
  "Scenarios": {
    "1": {
      "Name": "Prevent a deployment from running with privileged access",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-001"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someControlExistsToPreventPrivilegedAccessForKubernetesDeploymentsToAnActiveKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazurecontainernoprivilege'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "privilegedAccessRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with priviledged access 'True'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "1": 9,
                  "2": 9
                }
              },
              "ExpectedReason": 1,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers with privileged access can't run",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "1": 9,
                  "2": 9
                }
              },
              "ExpectedReason": 1,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresPrivilegedAccess",
          "Description": "Validate that the command 'chroot .' fails to execute; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "1": 9,
                  "2": 9
                }
              },
              "ExpectedReason": 1,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "1": 9,
                  "2": 9
                }
              },
              "ExpectedReason": 1,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "10": {
      "Name": "Prevent a deployment from running with the hostNetwork flag.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-004"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheHostNetworkInAnExistingKubernetesCluster",
          "Description": "Validate that at least on of the pod security policies has HostNetwork set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostNetworkRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with host network request marked 'True'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "6": 8,
                  "8": 8
                }
              },
              "ExpectedReason": 6,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers with hostNetwork access can't run",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "6": 8,
                  "8": 8
                }
              },
              "ExpectedReason": 6,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostNetworkNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -n ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "6": 8,
                  "8": 8
                }
              },
              "ExpectedReason": 6,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "6": 8,
                  "8": 8
                }
              },
              "ExpectedReason": 6,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "11": {
      "Name": "Prevent a deployment from running with the hostNetwork flag.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-004"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheHostNetworkInAnExistingKubernetesCluster",
          "Description": "Validate that at least on of the pod security policies has HostNetwork set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostNetworkRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with host network request marked 'False'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123253-71",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "No error would show",
            "PodState": {
              "PodName": "psp-test-pod-250221-123253-71",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostNetworkNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -n ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123253-71",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123253-71",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "12": {
      "Name": "Prevent a deployment from running with the hostNetwork flag.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-004"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheHostNetworkInAnExistingKubernetesCluster",
          "Description": "Validate that at least on of the pod security policies has HostNetwork set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostNetworkRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with host network request marked 'Not defined'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123256-98",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "No error would show",
            "PodState": {
              "PodName": "psp-test-pod-250221-123256-98",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostNetworkNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -n ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123256-98",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123256-98",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "13": {
      "Name": "Prevent a deployment from running with the allowPrivilegeEscalation flag",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-005"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheAllowPrivilegeEscalationInAnExistingKubernetesCluster",
          "Description": "Validate that at least one of the pod security policies has AllowPrivilegeEscalation set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "privilegedEscalationIsMarkedForTheKubernetesDeployment",
          "Description": "Parsing pod spec file '%s'; Attempt to create a pod with privilege escalation set to 'true'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "2": 6
                }
              },
              "ExpectedReason": 2,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers cant run using the allowPrivilegeEscalation flag",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "2": 6
                }
              },
              "ExpectedReason": 2,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformASudoCommandThatRequiresPrivilegedAccess",
          "Description": "Validate that the exit code for command 'sudo chroot .' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "2": 6
                }
              },
              "ExpectedReason": 2,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "2": 6
                }
              },
              "ExpectedReason": 2,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "14": {
      "Name": "Prevent a deployment from running with the allowPrivilegeEscalation flag",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-005"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheAllowPrivilegeEscalationInAnExistingKubernetesCluster",
          "Description": "Validate that at least one of the pod security policies has AllowPrivilegeEscalation set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "privilegedEscalationIsMarkedForTheKubernetesDeployment",
          "Description": "Parsing pod spec file '%s'; Attempt to create a pod with privilege escalation set to 'false'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123259-90",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "No error would show",
            "PodState": {
              "PodName": "psp-test-pod-250221-123259-90",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformASudoCommandThatRequiresPrivilegedAccess",
          "Description": "Validate that the exit code for command 'sudo chroot .' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123259-90",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123259-90",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "15": {
      "Name": "Prevent a deployment from running with the allowPrivilegeEscalation flag",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-005"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheAllowPrivilegeEscalationInAnExistingKubernetesCluster",
          "Description": "Validate that at least one of the pod security policies has AllowPrivilegeEscalation set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "privilegedEscalationIsMarkedForTheKubernetesDeployment",
          "Description": "Parsing pod spec file '%s'; Attempt to create a pod with privilege escalation set to 'false'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123304-9",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "No error would show",
            "PodState": {
              "PodName": "psp-test-pod-250221-123304-9",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformASudoCommandThatRequiresPrivilegedAccess",
          "Description": "Validate that the exit code for command 'sudo chroot .' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123304-9",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123304-9",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "16": {
      "Name": "Prevent a deployment from running as the root user",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-006"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningAsTheRootUserInAnExistingKubernetesCluster",
          "Description": "Validate that at least one of the pod security policies has RunAsUser set to MustRunAsNonRoot; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "theUserRequestedIsForTheKubernetesDeployment",
          "Description": "Attempt to create a pod with the requested user 'Root'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "3": 1
                }
              },
              "ExpectedReason": 3,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers cant run as root",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "3": 1
                }
              },
              "ExpectedReason": 3,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "theKubernetesDeploymentShouldRunWithANonrootUID",
          "Description": "Validate that the exit code for command 'id -u \u003e 0 ' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "3": 1
                }
              },
              "ExpectedReason": 3,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "3": 1
                }
              },
              "ExpectedReason": 3,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "17": {
      "Name": "Prevent a deployment from running as the root user",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-006"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningAsTheRootUserInAnExistingKubernetesCluster",
          "Description": "Validate that at least one of the pod security policies has RunAsUser set to MustRunAsNonRoot; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "theUserRequestedIsForTheKubernetesDeployment",
          "Description": "Attempt to create a pod with the requested user 'Non-Root'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123308-15",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123308-15",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "theKubernetesDeploymentShouldRunWithANonrootUID",
          "Description": "Validate that the exit code for command 'id -u \u003e 0 ' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123308-15",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123308-15",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "18": {
      "Name": "Prevent a deployment from running as the root user",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-006"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningAsTheRootUserInAnExistingKubernetesCluster",
          "Description": "Validate that at least one of the pod security policies has RunAsUser set to MustRunAsNonRoot; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "theUserRequestedIsForTheKubernetesDeployment",
          "Description": "Attempt to create a pod with the requested user 'Not Defined'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123317-78",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123317-78",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "theKubernetesDeploymentShouldRunWithANonrootUID",
          "Description": "Validate that the exit code for command 'id -u \u003e 0 ' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123317-78",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123317-78",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "19": {
      "Name": "Prevent deployments from running with the NET_RAW capability.",
      "Result": "Failed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-007"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "kubernetesDeploymentWithNETRAWCapability",
          "Description": "Creating pod with NET_RAW added in the pod's capabilities; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123321-93",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Failed",
          "Error": "pod psp-test-pod-250221-123321-93 was created - test failed",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers cant run with NET_RAW capabilities",
            "PodState": {
              "PodName": "psp-test-pod-250221-123321-93",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        }
      }
    },
    "2": {
      "Name": "Prevent a deployment from running with privileged access",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-001"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someControlExistsToPreventPrivilegedAccessForKubernetesDeploymentsToAnActiveKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazurecontainernoprivilege'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "privilegedAccessRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with priviledged access 'False'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123236-53",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "No error would show",
            "PodState": {
              "PodName": "psp-test-pod-250221-123236-53",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresPrivilegedAccess",
          "Description": "Validate that the command 'chroot .' fails to execute; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123236-53",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123236-53",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "20": {
      "Name": "Prevent deployments from running with the NET_RAW capability.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-007"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "kubernetesDeploymentWithNETRAWCapability",
          "Description": "Creating pod with NET_RAW dropped in the pod's capabilities; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123323-3",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123323-3",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        }
      }
    },
    "21": {
      "Name": "Prevent deployments from running with the NET_RAW capability.",
      "Result": "Failed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-007"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "kubernetesDeploymentWithNETRAWCapability",
          "Description": "Creating pod with NET_RAW not defined in the pod's capabilities; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123325-34",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Failed",
          "Error": "pod psp-test-pod-250221-123325-34 was created - test failed",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers cant run with NET_RAW capabilities",
            "PodState": {
              "PodName": "psp-test-pod-250221-123325-34",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        }
      }
    },
    "22": {
      "Name": "Prevent container running with capabilities beyond the default set.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-008"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithCapabilitiesBeyondTheDefaultSetFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that no pod security policies have any values in AllowedCapabilities; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "additionalCapabilitiesForTheKubernetesDeployment",
          "Description": "Creating list of allowed capabilities from linux non-default capability list; Attempting to deploy one pod for each specified capability (27 total); ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Capabilities": [
              "BPF",
              "NET_ADMIN",
              "SYS_PTRACE",
              "SYS_RESOURCE",
              "SYS_TTY_CONFIG",
              "SYS_PACCT",
              "AUDIT_CONTROL",
              "AUDIT_READ",
              "CHECKPOINT_RESTORE",
              "SYS_BOOT",
              "SYS_NICE",
              "NET_BROADCAST",
              "SYS_ADMIN",
              "SYS_RAWIO",
              "SYSLOG",
              "IPC_OWNER",
              "PERFMON",
              "DAC_READ_SEARCH",
              "IPC_LOCK",
              "MAC_OVERRIDE",
              "WAKE_ALARM",
              "LEASE",
              "MAC_ADMIN",
              "BLOCK_SUSPEND",
              "LINUX_IMMUTABLE",
              "SYS_MODULE",
              "SYS_TIME"
            ]
          }
        },
        "5": {
          "Name": "allOperationsWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a list of pods with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers can't run with added capabilities",
            "PodState": [
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 4
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 1
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 3
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 9
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 8
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 8
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 6
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 9
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 4
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 6
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 2
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              }
            ]
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresCapabilitiesOutsideOfTheDefaultSet",
          "Description": "Validate that verification commands exit 2 for all non-default capabilities, except those that are specified as allowed in the config; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully for all pods specified in the scenario state",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodStates": [
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 4
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 1
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 3
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 9
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 8
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 8
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 6
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 9
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 4
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 6
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 10
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 7
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              },
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "7": 2
                  }
                },
                "ExpectedReason": 7,
                "CommandExitCode": 0
              }
            ],
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "23": {
      "Name": "Prevent container running with capabilities beyond the default set.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-008"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithCapabilitiesBeyondTheDefaultSetFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that no pod security policies have any values in AllowedCapabilities; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "additionalCapabilitiesForTheKubernetesDeployment",
          "Description": "Creating list of capabilities from config vars; Attempting to deploy pod with no capabilities added; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Capabilities": []
          }
        },
        "5": {
          "Name": "allOperationsWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a list of pods with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": [
              {
                "PodName": "psp-test-pod-250221-123336-46",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              }
            ]
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresCapabilitiesOutsideOfTheDefaultSet",
          "Description": "Validate that verification commands exit 2 for all non-default capabilities, except those that are specified as allowed in the config; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully for all pods specified in the scenario state",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodStates": [
              {
                "PodName": "psp-test-pod-250221-123336-46",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              }
            ],
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "24": {
      "Name": "Prevent container running with capabilities beyond the default set.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-008"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithCapabilitiesBeyondTheDefaultSetFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that no pod security policies have any values in AllowedCapabilities; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "additionalCapabilitiesForTheKubernetesDeployment",
          "Description": "Attempting to deploy pod with no capabilities added; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Capabilities": null
          }
        },
        "5": {
          "Name": "allOperationsWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a list of pods with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": [
              {
                "PodName": "psp-test-pod-250221-123349-21",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              }
            ]
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresCapabilitiesOutsideOfTheDefaultSet",
          "Description": "Validate that verification commands exit 2 for all non-default capabilities, except those that are specified as allowed in the config; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully for all pods specified in the scenario state",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodStates": [
              {
                "PodName": "psp-test-pod-250221-123349-21",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              }
            ],
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "25": {
      "Name": "Prevent deployments from running with assigned capabilities.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-009"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithAssignedCapabilitiesFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazureallowedcapabilities'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "assignedCapabilitiesForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with the NET_ADMIN capability; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "7": 7
                }
              },
              "ExpectedReason": 7,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers with assigned capabilities can't be deployed",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "7": 7
                }
              },
              "ExpectedReason": 7,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresAnyCapabilities",
          "Description": "Validate that the exit code for command 'ip link add dummy0 type dummy' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "7": 7
                }
              },
              "ExpectedReason": 7,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "7": 7
                }
              },
              "ExpectedReason": 7,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "26": {
      "Name": "Prevent deployments from running with assigned capabilities.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-009"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithAssignedCapabilitiesFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazureallowedcapabilities'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "assignedCapabilitiesForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod without the NET_ADMIN capability; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123401-33",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123401-33",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresAnyCapabilities",
          "Description": "Validate that the exit code for command 'ip link add dummy0 type dummy' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123401-33",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123401-33",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "27": {
      "Name": "Prevent deployments from running with assigned capabilities.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-009"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithAssignedCapabilitiesFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazureallowedcapabilities'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "assignedCapabilitiesForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod without the NET_ADMIN capability; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123404-73",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123404-73",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresAnyCapabilities",
          "Description": "Validate that the exit code for command 'ip link add dummy0 type dummy' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123404-73",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123404-73",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "28": {
      "Name": "Prevent deployments from accessing unapproved volume types",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-010"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithUnapprovedVolumeTypesFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazurevolumetypes'; some systems exists to prevent kubernetes deployments without un approved volume types from being deployed existing kubernetes cluster",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "volumeTypesAreRequestedForTheKubernetesDeployment",
          "Description": "Getting a list of supported volume types; removing Approved volume types; Preparing spec for volumes; Adding spec 'psp-azp-volumetypes-hostpath.yaml'; Attempting to deploy pods using each aforementioned spec; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodStates": [
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "9": 10
                  }
                },
                "ExpectedReason": 9,
                "CommandExitCode": 0
              }
            ]
          }
        },
        "5": {
          "Name": "allOperationsWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a list of pods with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Cannot access unapproved volume type",
            "PodState": [
              {
                "PodName": "",
                "CreationError": {
                  "ReasonCodes": {
                    "9": 10
                  }
                },
                "ExpectedReason": 9,
                "CommandExitCode": 0
              }
            ]
          }
        }
      }
    },
    "29": {
      "Name": "Prevent deployments from accessing unapproved volume types",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-010"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithUnapprovedVolumeTypesFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazurevolumetypes'; some systems exists to prevent kubernetes deployments without un approved volume types from being deployed existing kubernetes cluster",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "volumeTypesAreRequestedForTheKubernetesDeployment",
          "Description": "Getting a list of approved volume types; Preparing spec for volumes; Adding spec 'psp-azp-volumetypes-configmap.yaml'; Adding spec 'psp-azp-volumetypes-emptydir.yaml'; Adding spec 'psp-azp-volumetypes-persistentvolumeclaim.yaml'; Attempting to deploy pods using each aforementioned spec; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodStates": [
              {
                "PodName": "psp-test-pod-250221-123407-23",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              },
              {
                "PodName": "psp-test-pod-250221-123410-70",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              },
              {
                "PodName": "psp-test-pod-250221-123413-29",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              }
            ]
          }
        },
        "5": {
          "Name": "allOperationsWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a list of pods with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": [
              {
                "PodName": "psp-test-pod-250221-123407-23",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              },
              {
                "PodName": "psp-test-pod-250221-123410-70",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              },
              {
                "PodName": "psp-test-pod-250221-123413-29",
                "CreationError": null,
                "ExpectedReason": null,
                "CommandExitCode": 0
              }
            ]
          }
        }
      }
    },
    "3": {
      "Name": "Prevent a deployment from running with privileged access",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-001"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someControlExistsToPreventPrivilegedAccessForKubernetesDeploymentsToAnActiveKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazurecontainernoprivilege'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "privilegedAccessRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with priviledged access 'Not Defined'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123239-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "No error would show",
            "PodState": {
              "PodName": "psp-test-pod-250221-123239-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresPrivilegedAccess",
          "Description": "Validate that the command 'chroot .' fails to execute; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123239-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123239-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "30": {
      "Name": "Prevent deployments from running without approved seccomp profile",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-011"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithoutApprovedSeccompProfilesFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazureallowedseccomp'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "anSeccompProfileIsRequestedForTheKubernetesDeployment",
          "Description": "Attempting to create pod with seccomp unapproved",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "SpecPath": "psp-azp-seccomp-unapproved.yaml",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "10": 2
                }
              },
              "ExpectedReason": 10,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Cannot request unapproved seccomp profile",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "10": 2
                }
              },
              "ExpectedReason": 10,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformASystemCallThatIsBlockedByTheSeccompProfile",
          "Description": "Validate that the exit code for command 'unshare' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "10": 2
                }
              },
              "ExpectedReason": 10,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "10": 2
                }
              },
              "ExpectedReason": 10,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "31": {
      "Name": "Prevent deployments from running without approved seccomp profile",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-011"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithoutApprovedSeccompProfilesFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazureallowedseccomp'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "anSeccompProfileIsRequestedForTheKubernetesDeployment",
          "Description": "Attempting to create pod with seccomp approved",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "SpecPath": "psp-azp-seccomp-approved.yaml",
            "PodState": {
              "PodName": "psp-test-pod-250221-123514-6",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "no error",
            "PodState": {
              "PodName": "psp-test-pod-250221-123514-6",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformASystemCallThatIsBlockedByTheSeccompProfile",
          "Description": "Validate that the exit code for command 'unshare' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123514-6",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123514-6",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "32": {
      "Name": "Prevent deployments from running without approved seccomp profile",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-011"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithoutApprovedSeccompProfilesFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazureallowedseccomp'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "anSeccompProfileIsRequestedForTheKubernetesDeployment",
          "Description": "Attempting to create pod with seccomp undefined",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "SpecPath": "psp-azp-seccomp-undefined.yaml",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "10": 8
                }
              },
              "ExpectedReason": 10,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Approved seccomp profile required",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "10": 8
                }
              },
              "ExpectedReason": 10,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformASystemCallThatIsBlockedByTheSeccompProfile",
          "Description": "Validate that the exit code for command 'unshare' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "10": 8
                }
              },
              "ExpectedReason": 10,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "10": 8
                }
              },
              "ExpectedReason": 10,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "33": {
      "Name": "Prevent pods from exposing unapproved host ports",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-012"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithUnapprovedPortRangeFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazurehostnetworkingports'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "anPortRangeIsRequestedForTheKubernetesDeployment",
          "Description": "Set unapproved port for pod spec: 22; unapproved port range is requested for kubernetes deployment. Port was 22.Attempting to create pod from yaml spec; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodSpecPath": "psp-azp-hostport-unapproved.yaml",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "6": 9,
                  "8": 9
                }
              },
              "ExpectedReason": 8,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Cannot access unapproved port range",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "6": 9,
                  "8": 9
                }
              },
              "ExpectedReason": 8,
              "CommandExitCode": 0
            }
          }
        }
      }
    },
    "34": {
      "Name": "Prevent pods from exposing unapproved host ports",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-012"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventKubernetesDeploymentsWithUnapprovedPortRangeFromBeingDeployedToAnExistingKubernetesCluster",
          "Description": "Validate that the kube instance security context contains 'k8sazurehostnetworkingports'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "anPortRangeIsRequestedForTheKubernetesDeployment",
          "Description": "not defined port range is requested for kubernetes deployment.Attempting to create pod from yaml spec; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodSpecPath": "psp-azp-hostport-notdefined.yaml",
            "PodState": {
              "PodName": "psp-test-pod-250221-123518-9",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123518-9",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        }
      }
    },
    "35": {
      "Name": "Prevent deployments from executing commands with the NET_RAW capability.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-013"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "kubernetesDeploymentWithNETRAWCapability",
          "Description": "Creating pod with NET_RAW dropped in the pod's capabilities; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123521-27",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123521-27",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "4": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123521-27",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        },
        "5": {
          "Name": "iShouldNotBeAbleToPerformACommandThatRequiresNETRAWCapability",
          "Description": "Validate that the exit code for command 'ping google.com' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123521-27",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        }
      }
    },
    "4": {
      "Name": "Prevent a deployment from running with the hostPID",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-002"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesContainerFromRunningUsingTheHostPIDOnTheActiveKubernetesCluster",
          "Description": "Validate that at least on of the cluster's pod security policies has HostPID set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostPIDRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with host PID 'True'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "5": 5
                }
              },
              "ExpectedReason": 5,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers cant run using hostPID",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "5": 5
                }
              },
              "ExpectedReason": 5,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostPIDNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -p ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "5": 5
                }
              },
              "ExpectedReason": 5,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "5": 5
                }
              },
              "ExpectedReason": 5,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "5": {
      "Name": "Prevent a deployment from running with the hostPID",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-002"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesContainerFromRunningUsingTheHostPIDOnTheActiveKubernetesCluster",
          "Description": "Validate that at least on of the cluster's pod security policies has HostPID set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostPIDRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with host PID 'False'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123242-31",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123242-31",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostPIDNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -p ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123242-31",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123242-31",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "6": {
      "Name": "Prevent a deployment from running with the hostPID",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-002"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesContainerFromRunningUsingTheHostPIDOnTheActiveKubernetesCluster",
          "Description": "Validate that at least on of the cluster's pod security policies has HostPID set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostPIDRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with host PID 'Not Defined'; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123245-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "",
            "PodState": {
              "PodName": "psp-test-pod-250221-123245-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostPIDNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -p ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123245-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123245-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "7": {
      "Name": "Prevent a deployment from running with the hostIPC flag.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-003"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheHostIPCInAnExistingKubernetesCluster",
          "Description": "Validate that at least on of the cluster's pod security policies has HostIPC set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostIPCRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with Host IPC requested: True; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "5": 4
                }
              },
              "ExpectedReason": 5,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Fail",
            "ExpectedMessage": "Containers with hostIPC access can't run",
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "5": 4
                }
              },
              "ExpectedReason": 5,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostIPCNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -i ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "5": 4
                }
              },
              "ExpectedReason": 5,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": {
                "ReasonCodes": {
                  "5": 4
                }
              },
              "ExpectedReason": 5,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "8": {
      "Name": "Prevent a deployment from running with the hostIPC flag.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-003"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheHostIPCInAnExistingKubernetesCluster",
          "Description": "Validate that at least on of the cluster's pod security policies has HostIPC set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostIPCRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with Host IPC requested: False; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123248-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "No error would show",
            "PodState": {
              "PodName": "psp-test-pod-250221-123248-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostIPCNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -i ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123248-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123248-19",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    },
    "9": {
      "Name": "Prevent a deployment from running with the hostIPC flag.",
      "Result": "Passed",
      "Tags": [
        "@k-psp",
        "@probes/kubernetes/pod_security_policy",
        "@k-psp-003"
      ],
      "Steps": {
        "1": {
          "Name": "aKubernetesClusterIsDeployed",
          "Description": "Validated that the k8s cluster specified in 'C:\\Users\\eknight\\.kube\\config' is deployed by checking the '' context; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "KubeConfigPath": "C:\\Users\\eknight\\.kube\\config",
            "KubeContext": ""
          }
        },
        "2": {
          "Name": "someSystemExistsToPreventAKubernetesDeploymentFromRunningUsingTheHostIPCInAnExistingKubernetesCluster",
          "Description": "Validate that at least on of the cluster's pod security policies has HostIPC set to false; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "3": {
          "Name": "aKubernetesDeploymentIsAppliedToAnExistingKubernetesCluster",
          "Description": "PENDING IMPLEMENTATION",
          "Result": "Passed",
          "Error": "",
          "Payload": null
        },
        "4": {
          "Name": "hostIPCRequestIsMarkedForTheKubernetesDeployment",
          "Description": "Attempt to deploy a pod with Host IPC requested: Not defined; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123251-7",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "5": {
          "Name": "theOperationWillWithAnError",
          "Description": "Validate that the scenario state was updated in the previous step with a particular result and message; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "ExpectedResult": "Succeed",
            "ExpectedMessage": "No error would show",
            "PodState": {
              "PodName": "psp-test-pod-250221-123251-7",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "6": {
          "Name": "iShouldNotBeAbleToPerformACommandThatProvidesAccessToTheHostIPCNamespace",
          "Description": "Validate that the exit code for command 'nsenter -t 1 -i ps' is 1; ",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123251-7",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            }
          }
        },
        "7": {
          "Name": "iShouldBeAbleToPerformAnAllowedCommand",
          "Description": "Validate that 'ls' is executed successfully",
          "Result": "Passed",
          "Error": "",
          "Payload": {
            "PodState": {
              "PodName": "psp-test-pod-250221-123251-7",
              "CreationError": null,
              "ExpectedReason": null,
              "CommandExitCode": 0
            },
            "Command": "ls",
            "ExpectedExitCode": 0
          }
        }
      }
    }
  }
}